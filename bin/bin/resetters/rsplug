#!/usr/bin/env bash


### Ready?
##########

read -p "Resetting Vim plugins (enter to continue)"

# ---

if [[ ! -x "$(command -v "vim")" ]]; then
    printf "\n"
    printf "==================== Warning! ====================\n"
    printf "Vim is not installed: no operations were executed.\n"
    exit 1
fi

# ---

# create ~/.vim/pack/plugins/start if it doesn't exist
# (to store our plugins) and jump into it
[[ -d ~/.vim/pack/plugins/start ]] || mkdir -p ~/.vim/pack/plugins/start
cd ~/.vim/pack/plugins/start




### Vim 8 plugins
#################

if [[ ! -d fugitive ]]; then
    printf "INSTALLING FUGITIVE\n"
    git clone https://github.com/tpope/vim-fugitive fugitive
else
    printf "UPDATING FUGITIVE\n"
    cd fugitive
    git pull
    cd - &>/dev/null
fi

# ---

printf "\n"
if [[ ! -d commentary ]]; then
    printf "INSTALLING COMMENTARY\n"
    git clone https://github.com/tpope/vim-commentary commentary
else
    printf "UPDATING COMMENTARY\n"
    cd commentary
    git pull
    cd - &>/dev/null
fi

# ---

printf "\n"
if [[ ! -d surround ]]; then
    printf "INSTALLING SURROUND\n"
    git clone https://github.com/tpope/vim-surround surround
else
    printf "UPDATING SURROUND\n"
    cd surround
    git pull
    cd - &>/dev/null
fi

# ---

printf "\n"
if [[ ! -d repeat ]]; then
    printf "INSTALLING REPEAT\n"
    git clone https://github.com/tpope/vim-repeat repeat
else
    printf "UPDATING REPEAT\n"
    cd repeat
    git pull
    cd - &>/dev/null
fi

# ---

printf "\n"
if [[ ! -d context ]]; then
    printf "INSTALLING CONTEXT\n"
    git clone https://github.com/wellle/context.vim context
else
    printf "UPDATING CONTEXT\n"
    cd context
    git pull
    cd - &>/dev/null
fi

# ---

printf "\n"
if [[ ! -d autopairs ]]; then
    printf "INSTALLING AUTOPAIRS\n"
    git clone https://github.com/jiangmiao/auto-pairs autopairs
else
    printf "UPDATING AUTOPAIRS\n"
    cd autopairs
    git pull
    cd - &>/dev/null
fi

# ---

printf "\n"
if [[ ! -d undotree ]]; then
    printf "INSTALLING UNDOTREE\n"
    git clone https://github.com/mbbill/undotree undotree
else
    printf "UPDATING AUTOPAIRS\n"
    cd undotree
    git pull
    cd - &>/dev/null
fi

# ---

printf "\n"
if [[ ! -d ale ]]; then
    printf "INSTALLING ALE\n"
    git clone https://github.com/dense-analysis/ale ale
else
    printf "UPDATING ALE\n"
    cd ale
    git pull
    cd - &>/dev/null
fi

# ---

# (over)write a simple config-file for Vim8 plugins:
# mappings and other little things
[[ -f rsplug/plugin ]] || mkdir -p rsplug/plugin
cat 2>/dev/null > rsplug/plugin/rsplug8.vim <<-EOF
" UNDOTREE CONFIG
let g:undotree_WindowLayout = 2
let g:undotree_SetFocusWhenToggle = 1
" ---
function! s:ToggleUndoTree()
    if &filetype ==? 'netrw' || buffer_name() =~ '!bash' || buffer_name() =~ '!dash'
        return
    endif
    " ---
    if !exists('g:toggle_undo_tree')
        let g:toggle_undo_tree = 0
    endif
    " ---
    if g:toggle_undo_tree ==? 0
        let g:toggle_undo_tree = 1
        let g:tabn = tabpagenr()
        execute 'tabnew % | UndotreeShow'
    else
        let g:toggle_undo_tree = 0
        execute 'UndotreeHide | tabclose |  normal ' . g:tabn . 'gt'
    endif
endfunction
" ---
command! ToggleUndoTree call <SID>ToggleUndoTree()
nnoremap <silent><S-u> :ToggleUndoTree<CR>


" ALE CONFIG
let g:ale_completion_enabled = 1
set omnifunc=ale#completion#OmniFunc
" ---
nnoremap <silent><C-n> :ALENext<CR>
nnoremap <silent><C-p> :ALEPrevious<CR>
nnoremap <leader>fj :ALEGoToDefinition<CR>
nnoremap <leader>fk :ALEGoToImplementation<CR>
EOF




### Vim 9 plugins (Ubuntu only)
###############################

# if Vim is not version 9 and we're on Ubuntu, we add the PPA and upgrade Vim;
# if it is not the case we cannot go no further and you have to manually install Vim 9
if [[ "$(vim --version | grep -oE 'Vi IMproved 9')" != "Vi IMproved 9" ]]; then
    if [[ $(uname -a) =~ "Ubuntu" ]]; then
        printf "\n"
        printf "UPGRADING VIM\n"
        [[ $(grep -qr "^deb .*jonathonf/vim" /etc/apt/sources.list) ]] || sudo add-apt-repository ppa:jonathonf/vim
        sudo apt-get update
        sudo apt-get install -qq -y vim-gtk3
    else
        printf "\n"
        printf "=========== We're done here ===========\n"
        printf "Enjoy your Vim-Plugged life with Vim 8!\n"
        exit 0
    fi
fi

# ---

printf "\n"
if [[ ! -d fuzzyy ]]; then
    printf "INSTALLING FUZZYY\n"
    git clone https://github.com/Donaldttt/fuzzyy fuzzyy
else
    printf "UPDATING FUZZYY\n"
    cd fuzzyy
    git pull
    cd - &>/dev/null
fi

# ---

printf "\n"
if [[ ! -d copilot ]]; then
    printf "INSTALLING COPILOT\n"
    [[ -x "$(command -v "node")" ]] || sudo apt-get install -qq -y nodejs
    git clone https://github.com/github/copilot.vim copilot
else
    printf "UPDATING COPILOT\n"
    cd copilot
    git pull
    cd - &>/dev/null
fi

# ---

# (over)write a simple config-file for Vim9 plugins:
# mappings and other little things
[[ -f rsplug/plugin ]] || mkdir -p rsplug/plugin
cat 2>/dev/null > rsplug/plugin/rsplug9.vim <<-EOF
" VIM9 CONFIG
set wildoptions=fuzzy,pum,tagfile


" FUZZYY CONFIG
let g:enable_fuzzyy_keymaps = 0
let g:files_respect_gitignore = 1
let g:fuzzyy_keymaps = {
            \      'menu_up': ["\<c-k>", "\<c-p>", "\<Up>"],
            \      'menu_down': ["\<c-j>", "\<c-n>", "\<Down>"],
            \      'menu_select': ["\<CR>"],
            \      'preview_up': ["\<c-u>"],
            \      'preview_down': ["\<c-d>"],
            \      'exit': ["\<Esc>", "\<c-c>", "\<c-[>"],
            \ }
nnoremap <leader>ff :FuzzyFiles<CR>
nnoremap <leader>fg :FuzzyGrep<CR>
nnoremap <leader>fh :FuzzyCommands<CR>
nnoremap <leader>fl :FuzzyInBuffer<CR>
nnoremap <leader><Tab> :FuzzyBuffers<CR>


" COPILOT CONFIG
let g:copilot_enabled = v:false
inoremap <silent><C-H> <Plug>(copilot-dismiss)
inoremap <silent><C-J> <Plug>(copilot-next)
inoremap <silent><C-K> <Plug>(copilot-previous)
inoremap <silent><C-L> <Plug>(copilot-suggest)
EOF




### Bye bye
###########

printf "\n"
printf "=========== We're done here ===========\n"
printf "Enjoy your Vim-Plugged life with Vim 9!\n"
